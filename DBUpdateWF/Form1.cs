using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using DevExpress.Spreadsheet;
using DevExpress.Spreadsheet.Export;
using System.Data.SqlClient;

namespace DBUpdateWF
{
    public partial class Form1 : Form
    {
        IniFile ini = new IniFile("dbConf.ini");
        //string connStr = @"Data Source=DESKTOP-N6R6KEU\SQLEXPRESS;Initial Catalog=STD_DB_DICT_HIVE;Integrated Security=True";
        //string connStr = @"Data Source=SQLSRV2017\SQL2017;Initial Catalog=TEST_STD_DB_DICT_HIVE;Integrated Security=True";
        DataTable dtDb = new DataTable();
        DataTable changesTable = new DataTable();
        DataTable excelDataTable = new DataTable();
        string fileName;
        string connSource;
        string connCatalog;

        public Form1()
        {
            InitializeComponent();
            gridControl1.Visible = false;
            gridControl2.Visible = false;

            //gridView2.CellValueChanged += GridView2_CellValueChanged;
            gridView2.CellValueChanging += GridView2_CellValueChanging;

            updateButton.Enabled = false;
            //buttonDBUpdate.IsEnabled = false;
            //buttonCancel.IsEnabled = false;

            // This line of code is generated by Data Source Configuration Wizard
            // Fill a SqlDataSource
        }

        private void GridView2_CellValueChanging(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {
            //MessageBox.Show(gridView2.GetRowCellValue(e.RowHandle, "accept").ToString());
            gridView2.SetFocusedValue(!Convert.ToBoolean(gridView2.GetFocusedValue()));
            //MessageBox.Show(gridView2.GetFocusedRowCellValue("code").ToString());

            if (ini.KeyExists("Source", "DB_Connection") && ini.KeyExists("Catalog", "DB_Connection"))
            {
                connSource = ini.ReadINI("DB_Connection", "Source");
                connCatalog = ini.ReadINI("DB_Connection", "Catalog");
                string connStr = $"Data Source={connSource};Initial Catalog={connCatalog};Integrated Security=True";
                using (SqlConnection connection = new SqlConnection(connStr))
                {
                    connection.Open();
                    SqlTransaction transaction = connection.BeginTransaction();

                    SqlCommand command = connection.CreateCommand();
                    command.Transaction = transaction;

                    try
                    {
                        // выполняем команду
                        command.CommandText = $"UPDATE dbo.med_stuf_temp SET accept={Convert.ToInt16(gridView2.GetFocusedValue())} WHERE code={gridView2.GetFocusedRowCellValue("code").ToString()}";
                        command.ExecuteNonQuery();
                        // подтверждаем транзакцию
                        transaction.Commit();
                        //MessageBox.Show($"Значение в таблице изменено на {Convert.ToBoolean(gridView2.GetFocusedValue())}");
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($@"При обновлении БД возникла ошибка
{ex.Message}", "Ошибка обновления", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        transaction.Rollback();
                        command.CommandText = "DELETE dbo.med_stuf_temp";
                        command.ExecuteNonQuery();
                    }
                }
            }
            else
            {
                MessageBox.Show("Проверьте наличие файла конфигурации подключкния к БД", "Ошибка подключения к БД", MessageBoxButtons.OK, MessageBoxIcon.Error);
                medStufButton.Enabled = true;
            }
        }

        private void GridView2_CellValueChanged(object sender, DevExpress.XtraGrid.Views.Base.CellValueChangedEventArgs e)
        {
            MessageBox.Show(e.Column.Caption);
            //MessageBox.Show(gridView2.GetRowCellValue(e.RowHandle, "accept").ToString());
        }

        private void medStufButton_Click(object sender, EventArgs e)
        {
            int changeCostCounter = 0;
            int changeNameCounter = 0;
            int totalChangeCounter = 0;
            int newCodeCounter = 0;
            int excelRowCounter;
            bool changeCost = false;

            medStufButton.Enabled = false;
            dtDb.Clear();
            excelDataTable.Clear();
            changesTable.Clear();
            #region File choise
            OpenFileDialog openFileDialog = new OpenFileDialog();
            openFileDialog.Filter = "XLSX-files|*.xlsx";
            openFileDialog.ShowDialog();
            #endregion
            Workbook wbook = new Workbook();
            if (openFileDialog.FileName == "")
            {
                MessageBox.Show("Выберите файл", "Ошибка выбора файла", MessageBoxButtons.OK, MessageBoxIcon.Error);
                medStufButton.Enabled = true;
            }
            else
            {
                fileName = System.IO.Path.GetFileNameWithoutExtension(openFileDialog.FileName);
                wbook.LoadDocument(openFileDialog.FileName);
                Worksheet worksheet =
                    wbook.Worksheets[0];
                excelRowCounter = 0;
                while (!worksheet.Cells[excelRowCounter, 1].Value.IsEmpty)
                {
                    excelRowCounter++;
                }
                try
                {
                    var range = worksheet.Range[$"A1:E{excelRowCounter}"].CurrentRegion;
                    excelDataTable = worksheet.CreateDataTable(range, true);
                    if (excelDataTable.Columns.Count == 5)
                    {
                        if (!excelDataTable.Columns[0].ColumnName.Equals("№ п.п.") ||
                        !excelDataTable.Columns[1].ColumnName.Equals("Код мед.изделия") ||
                        !excelDataTable.Columns[2].ColumnName.Equals("Наименование") ||
                        !excelDataTable.Columns[3].ColumnName.StartsWith("Цена за мед. изделие") ||
                        !excelDataTable.Columns[4].ColumnName.Equals("Действие"))//
                        {
                            throw new Exception("Структура файла отличается от ожидаемой");
                        }
                    }
                    else
                    {
                        throw new Exception("Структура файла отличается от ожидаемой");
                    }
                    excelDataTable.Columns[3].DataType = System.Type.GetType("System.Double");
                    DataTableExporter exporter = worksheet.CreateDataTableExporter(range, excelDataTable, true);
                    exporter.Options.ConvertEmptyCells = true;
                    exporter.Export();
/*                    try
                    {
                        excelDataTable.PrimaryKey = new DataColumn[] { excelDataTable.Columns[1] };
                    }
                    catch
                    {

                        throw new Exception("Коды в файле не уникальны");
                    }
*/ //для обесспечения уникальноти кодов в экселе
                    excelDataTable.Columns[0].ColumnName = "numberrrr";
                    excelDataTable.Columns[1].ColumnName = "code";
                    excelDataTable.Columns[2].ColumnName = "name";
                    excelDataTable.Columns[3].ColumnName = "cost";
                    excelDataTable.Columns["cost"].DataType = System.Type.GetType("System.Double");

                    excelDataTable.Columns[4].ColumnName = "action";
                    #region Connection settings checking
                    if (ini.KeyExists("Source", "DB_Connection") && ini.KeyExists("Catalog", "DB_Connection"))
                    {
                        connSource = ini.ReadINI("DB_Connection", "Source");
                        connCatalog = ini.ReadINI("DB_Connection", "Catalog");
                        try
                        {
                            string connStr = $"Data Source={connSource};Initial Catalog={connCatalog};Integrated Security=True";
                            using (SqlConnection connection = new SqlConnection(connStr))
                            {
                                SqlDataAdapter adapter = new SqlDataAdapter();
                                //SqlDataAdapter adapter2 = new SqlDataAdapter();
                                adapter.SelectCommand = new SqlCommand("SELECT * FROM dbo.med_stuf", connection);
                                adapter.Fill(dtDb);
                                //                            dtDb.Columns["cost"].DataType = System.Type.GetType("System.Single");
                                adapter.SelectCommand = new SqlCommand("SELECT * FROM dbo.med_stuf_temp", connection);
                                adapter.Fill(changesTable);
                                changesTable.Clear();
                                //if (changesTable.Columns.Count < 10)
                                //{
                                //    changesTable.Columns.Add("chng_knd");
                                //    changesTable.Columns.Add("accept");
                                //}
                                //gridControl1.DataSource = dtDb;
                                #region Filling datatable with changes
                                dtDb.PrimaryKey = new DataColumn[] { dtDb.Columns["code"] };
                                changesTable.PrimaryKey = new DataColumn[] { changesTable.Columns["code"] };
                                foreach (DataRow newDataRow in excelDataTable.Rows)
                                {
                                    if (!newDataRow["code"].Equals(DBNull.Value))
                                    {
                                        object oldPrice = DBNull.Value;
                                        object oldName = DBNull.Value;
                                        object newPrice = DBNull.Value;
                                        object newName = DBNull.Value;

                                        if (dtDb.Rows.Contains(newDataRow["code"]))
                                        {
                                            foreach (DataRow dbRow in dtDb.Select($"code={newDataRow["code"]}"))
                                            {
                                                object oldPriceNe = dbRow["cost"];
                                                object oldNameNe = dbRow["name"];
                                                object newPriceNe = newDataRow["cost"];
                                                object newNameNe = newDataRow["name"];

                                                if (!newDataRow["name"].Equals(DBNull.Value))
                                                {

                                                    if (!dbRow["cost"].Equals(newDataRow["cost"]))
                                                    {
                                                        oldPrice= dbRow["cost"];
                                                        dbRow["cost"] = newDataRow["cost"];
                                                        newPrice = newDataRow["cost"];
                                                        changeCostCounter++;
                                                        totalChangeCounter++;
                                                        changeCost = !changeCost;
                                                    }
                                                    //else
                                                    //{
                                                    //    oldPrice = newPrice = dbRow["cost"];
                                                    //}
                                                    if (!dbRow["name"].Equals(newDataRow["name"]))
                                                    {
                                                        oldName = dbRow["name"];
                                                        dbRow["name"] = newDataRow["name"];
                                                        newName = newDataRow["name"];
                                                        if (!changeCost)
                                                            totalChangeCounter++;
                                                        changeNameCounter++;
                                                    }
                                                    if (!oldName.Equals(newName) || !oldPrice.Equals(newPrice))
                                                    {
                                                        changeCost = !changeCost;
                                                        changesTable.Rows.Add(new Object[] { DBNull.Value,
                                                                                newDataRow["code"],
                                                                                oldPrice,
                                                                                newPrice,
                                                                                oldName,
                                                                                newName,
                                                                                fileName,
                                                                                DBNull.Value,
                                                                                DBNull.Value,
                                                                                "изменение",
                                                                                true,
                                                                                oldPriceNe,
                                                                                newPriceNe,
                                                                                oldNameNe,
                                                                                newNameNe
                                                                                });
                                                    }
                                                    if (!newDataRow["action"].Equals(DBNull.Value))
                                                    {
                                                        changesTable.Rows.Add(new Object[] { DBNull.Value,
                                                                                newDataRow["code"],
                                                                                dbRow["cost"],
                                                                                newPrice,
                                                                                dbRow["name"],
                                                                                newName,
                                                                                fileName,
                                                                                DBNull.Value,
                                                                                DBNull.Value,
                                                                                "удаление",
                                                                                true,
                                                                                oldPriceNe,
                                                                                newPriceNe,
                                                                                oldNameNe,
                                                                                newNameNe
                                                                                });
                                                    }
                                                }//if name!=0
                                                else
                                                {
                                                    if (!newDataRow["action"].Equals(DBNull.Value))
                                                    {
                                                        changesTable.Rows.Add(new Object[] { DBNull.Value,
                                                                                newDataRow["code"],
                                                                                dbRow["cost"],
                                                                                newPrice,
                                                                                dbRow["name"],
                                                                                newName,
                                                                                fileName,
                                                                                DBNull.Value,
                                                                                DBNull.Value,
                                                                                "удаление",
                                                                                true,
                                                                                oldPriceNe,
                                                                                newPriceNe,
                                                                                oldNameNe,
                                                                                newNameNe
                                                                                });
                                                    }
                                                    else
                                                    {
                                                        MessageBox.Show($"Наименования услуг в файле \"{fileName}\" должны быть заполнены", "Ошибка!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                                        changesTable.Clear();
                                                    }
                                                }//else name!=0
                                            }//foreach dbRow
                                        }//contains
                                        else
                                        {
                                            if (!changesTable.Rows.Contains(newDataRow["code"]))
                                            {
                                                newPrice = newDataRow["cost"];
                                                newName = newDataRow["name"];
                                                changesTable.Rows.Add(new Object[] { DBNull.Value,
                                                                                newDataRow["code"],
                                                                                oldPrice,
                                                                                newPrice,
                                                                                oldName,
                                                                                newName,
                                                                                fileName,
                                                                                DBNull.Value,
                                                                                DBNull.Value,
                                                                                "добавление",
                                                                                true,
                                                                                DBNull.Value,
                                                                                newPrice,
                                                                                DBNull.Value,
                                                                                newName
                                                                                });
                                                newCodeCounter++;
                                            }
                                        }//else contains
                                    }//if code not null
                                    else
                                    {
                                        MessageBox.Show($"Коды услуг в файле {openFileDialog.FileName} должны быть заполнены", "Ошибка!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                                        changesTable.Clear();
                                    }
                                }
                                #endregion
                                if (changesTable.Rows.Count > 0)
                                {
                                    adapter.SelectCommand = new SqlCommand("SELECT * FROM dbo.med_stuf_temp", connection);
                                    SqlCommandBuilder commandBuilder = new SqlCommandBuilder(adapter);
                                    adapter.Update(changesTable);
                                    changesTable.Clear();
                                    adapter.Fill(changesTable);
                                    gridControl2.DataSource = changesTable;
                                    //dataGridResult//.Columns[6].Visibility = Visibility.Hidden;
                                    //gridView2.Columns[10].UnboundType=DataGridViewCheckBoxColumn 
                                    //dataGridResult.Columns[7].Visibility = Visibility.Collapsed;
                                    //sqlDataSource1.Fill();
                                    gridControl2.Visible = true;
                                    //buttonDBUpdate.IsEnabled = true;
                                    //buttonCancel.IsEnabled = true;
                                    MessageBox.Show($@"Записей в файле: {excelRowCounter - 1}
Из них с изменениями: {totalChangeCounter}
Изменений цены: {changeCostCounter}
Изменений наименования: {changeNameCounter}
Новых записей: {newCodeCounter}", "Итого:", MessageBoxButtons.OK, MessageBoxIcon.Information);

                                }
                                else
                                {
                                    MessageBox.Show($"В файле \"{fileName}\" нет изменений", "Обновление", MessageBoxButtons.OK, MessageBoxIcon.Information);
                                    medStufButton.Enabled = true;
                                }
                            }//connection

                        }
                        catch (SqlException sqlEx)
                        {
                            MessageBox.Show($"Проверьте параметры подключения к базе данных {sqlEx.Message}");
                            medStufButton.Enabled = true;
                        }
                    }
                    else
                    {
                        MessageBox.Show("Проверьте наличие файла конфигурации подключкния к БД", "Ошибка подключения к БД", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        medStufButton.Enabled = true;
                    }
                #endregion
                }
                catch (InvalidOperationException inOpEx)
                {
                    MessageBox.Show($@"Ошибка структуры файла.
{inOpEx.Message}", "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    medStufButton.Enabled = true;
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message, "Ошибка", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }//else от наличия файла в openFileDialogе
            updateButton.Enabled = true;
        }//medStufButton

        //private void Form1_Load(object sender, EventArgs e)
        //{
        //    // TODO: данная строка кода позволяет загрузить данные в таблицу "sTD_DB_DICT_HIVEDataSet1.med_stuf_temp". При необходимости она может быть перемещена или удалена.
        //    this.med_stuf_tempTableAdapter.Fill(this.sTD_DB_DICT_HIVEDataSet1.med_stuf_temp);

        //}

        private void updateButton_Click(object sender, EventArgs e)
        {
            if (ini.KeyExists("Source", "DB_Connection") && ini.KeyExists("Catalog", "DB_Connection"))
            {
                connSource = ini.ReadINI("DB_Connection", "Source");
                connCatalog = ini.ReadINI("DB_Connection", "Catalog");
                string connStr = $"Data Source={connSource};Initial Catalog={connCatalog};Integrated Security=True";
                using (SqlConnection connection = new SqlConnection(connStr))
                {
                    connection.Open();
                    SqlTransaction transaction = connection.BeginTransaction();

                    SqlCommand command = connection.CreateCommand();
                    command.Transaction = transaction;

                    try
                    {
                        // выполняем две отдельные команды
                        //command.CommandText = "UpdateMedStuf";
                        //command.CommandText = "UpdateMedStuf2";
                        command.CommandText = "UpdateMedStuf3";
                        command.ExecuteNonQuery();
                        command.CommandText = "DELETE dbo.med_stuf_temp";
                        command.ExecuteNonQuery();

                        // подтверждаем транзакцию
                        transaction.Commit();
                        MessageBox.Show("Данные обновлены");
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($@"При обновлении БД возникла ошибка
{ex.Message}","Ошибка обновления", MessageBoxButtons.OK, MessageBoxIcon.Error);
                        transaction.Rollback();
                        command.CommandText = "DELETE dbo.med_stuf_temp";
                        command.ExecuteNonQuery();
                    }
                }
            }
            else
            {
                MessageBox.Show("Проверьте наличие файла конфигурации подключкния к БД", "Ошибка подключения к БД", MessageBoxButtons.OK, MessageBoxIcon.Error);
                medStufButton.Enabled = true;
            }



            medStufButton.Enabled = true;
            updateButton.Enabled = false;
            gridControl2.Visible = false;
        }
    }
}
